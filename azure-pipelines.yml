trigger:
  branches:
    include:
      - none  # Manual trigger only

pool:
  vmImage: 'ubuntu-latest'

variables:
  dockerRegistryServiceConnection: 'DockerHubConnection'
  imageRepository: 'prmd77/frontend'
  containerRegistry: 'prmd77'
  tag: '$(Build.BuildId)'
  kubernetesServiceConnection: 'aks-service-connection'
  namespace: 'default'

stages:
  - stage: Build
    displayName: Build and Scan
    jobs:
      - job: BuildandScan
        displayName: Build and Scan
        steps:
          - checkout: self

          # ✅ SonarCloud Prepare
          - task: SonarCloudPrepare@1
            inputs:
              SonarCloud: 'sonarqubeServiceConnection'   
              organization: 'cloudsolution'             
              scannerMode: 'CLI'
              configMode: 'manual'
              cliProjectKey: 'cloudsolution_cloudsolution'
              cliProjectName: 'cloudsolution'
              extraProperties: |
                sonar.sources=.
                sonar.exclusions=**/tests/**

          # ✅ Run SonarCloud Analysis
          - task: SonarCloudAnalyze@1

          # ✅ TFLint install and run
          - script: |
              curl -s https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh | bash
              tflint
            displayName: "Run TFLint"
            
          # ✅ Checkov install and run
          - script: |
              pip install checkov
              checkov -d .
            displayName: "Run Checkov"
            
          # ✅ tfsec run
          - task: tfsec@1
            inputs:
              version: 'v1.26.0'
              debug: true
              dir: 'apex-front-main'

          # ✅ Docker build (NO push yet)
          - task: Docker@2
            displayName: Build Docker image
            inputs:
              command: build
              repository: $(imageRepository)
              dockerfile: '**/Dockerfile'
              containerRegistry: $(dockerRegistryServiceConnection)
              tags: |
                $(tag)

          # Install Trivy
          - script: |
              echo "Installing Trivy..."
              sudo apt-get update -y
              sudo apt-get install -y wget apt-transport-https gnupg lsb-release
              wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
              echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee /etc/apt/sources.list.d/trivy.list
              sudo apt-get update -y
              sudo apt-get install -y trivy
            displayName: "Install Trivy"

          # Run Trivy scan
          - script: |
              echo "Scanning image with Trivy..."
              trivy image --exit-code 1 --severity HIGH,CRITICAL $(containerRegistry)/$(imageRepository):$(tag)
            displayName: "Trivy Scan"


          # ✅ Push only if scan passed
          - task: Docker@2
            displayName: Push Docker image
            inputs:
              command: push
              repository: $(imageRepository)
              containerRegistry: $(dockerRegistryServiceConnection)
              tags: |
                $(tag)

  - stage: Deploy
    displayName: Deploy to AKS
    dependsOn: [Build]         # Run only if Build succeeds
    jobs:
      - job: Deploy
        steps:
          - task: KubernetesManifest@1
            displayName: Deploy to AKS
            inputs:
              action: deploy
              kubernetesServiceConnection: $(kubernetesServiceConnection)
              namespace: $(namespace)
              manifests: |                
                apex-front-main/frontend-deployment.yaml
                apex-front-main/service.yaml
              containers: |
                $(containerRegistry)/$(imageRepository):$(tag)
            continueOnError: true
