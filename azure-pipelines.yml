trigger:
  branches:
    include:
      - feature/*


pool:
  vmImage: 'ubuntu-latest'

variables:
  dockerRegistryServiceConnection: 'DockerHubConnection'
  imageRepository: 'prmd77/frontend'
  containerRegistry: 'prmd77'
  tag: '$(Build.BuildId)'
  kubernetesServiceConnection: 'aks-service-connection'
  namespace: 'frontend-ns'
  dockerUsername: 'prmd77'  # Consider storing this as secret in real usage

stages:
  - stage: Build
    displayName: Build, Scan & Push
    jobs:
      - job: BuildandScan
        displayName: Build and Scan
        steps:
          - checkout: self

          # SonarCloud Prepare
          - task: SonarCloudPrepare@1
            inputs:
              SonarCloud: 'sonarqubeServiceConnection'
              organization: 'cloudsolution'
              scannerMode: 'CLI'
              configMode: 'manual'
              cliProjectKey: 'cloudsolution_cloudsolution'
              cliProjectName: 'cloudsolution'
              extraProperties: |
                sonar.sources=.
                sonar.exclusions=**/tests/**

          # SonarCloud Analyze
          - task: SonarCloudAnalyze@1

          # TFLint
          - script: |
              curl -s https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh | bash
              tflint
            displayName: "Run TFLint"

          # ✅ skip-check CKV_K8S_43
          - script: |
              pip install checkov
              checkov -d . --skip-check CKV_K8S_43
            displayName: "Run Checkov"

          # tfsec
          - task: tfsec@1
            inputs:
              version: 'v1.26.0'
              debug: true
              dir: 'apex-front-main'

          # Docker Build & Push Temp Image for Scan
          - task: Docker@2
            displayName: Build & Push Temp Image for Scan
            inputs:
              command: buildAndPush
              repository: $(imageRepository)
              dockerfile: '**/Dockerfile'
              containerRegistry: $(dockerRegistryServiceConnection)
              tags: |
                temp-scan

          # Install Trivy
          - script: |
              sudo apt-get update -y
              sudo apt-get install -y wget apt-transport-https gnupg lsb-release
              wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
              echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee /etc/apt/sources.list.d/trivy.list
              sudo apt-get update -y
              sudo apt-get install -y trivy
              trivy --version
            displayName: "Install Trivy"

          # Validate Docker Credentials
          - script: |
              if [ -z "$(dockerUsername)" ] || [ -z "$(dockerPasswordSecret)" ]; then
                echo "Error: Docker credentials are not set properly!"
                exit 1
              fi
            displayName: "Validate Docker Credentials"

          # Trivy Scan on temp-scan image
          - script: |
              echo "Scanning remote image with Trivy..."
              trivy image \
                --exit-code 1 \
                --severity HIGH,CRITICAL \
                --username $(dockerUsername) \
                --password $(dockerPasswordSecret) \
                $(imageRepository):temp-scan
            displayName: "Trivy Remote Scan"

          # Build Final Image
          - task: Docker@2
            displayName: Build Final Image
            inputs:
              command: build
              repository: $(imageRepository)
              dockerfile: '**/Dockerfile'
              containerRegistry: $(dockerRegistryServiceConnection)
              tags: |
                $(tag)

          # Push Final Image
          - task: Docker@2
            displayName: Push Final Image
            inputs:
              command: push
              repository: $(imageRepository)
              containerRegistry: $(dockerRegistryServiceConnection)
              tags: |
                $(tag)

  - stage: Deploy
    displayName: Deploy to AKS
    dependsOn: [Build]
    jobs:
      - job: Deploy
        displayName: Deploy Job
        steps:

          # ✅ Set AKS credentials so kubectl works
          - task: AzureCLI@2
            displayName: "Set AKS credentials"
            inputs:
              azureSubscription: 'aks-service-connectio'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                az aks get-credentials --resource-group aks-group --name myAKSCluster --overwrite-existing

          # ✅ Create namespace if not exists
          - script: |
              echo "Ensuring namespace exists..."
              kubectl get ns $(namespace) || kubectl create ns $(namespace)
            displayName: "Ensure Kubernetes Namespace"

          # ✅ Apply RBAC
          - task: Kubernetes@1
            displayName: "Apply RBAC Role and RoleBinding"
            inputs:
              connectionType: 'Azure Resource Manager'
              azureSubscriptionEndpoint: 'aks-service-connectio'
              azureResourceGroup: 'aks-group'
              kubernetesCluster: 'myAKSCluster'
              namespace: '$(namespace)'
              command: 'apply'
              useConfigurationFile: true
              configuration: 'apex-front-main/rbac.yaml'
              arguments: '--validate=false'
              
             

          # ✅ Deploy manifests
          - task: KubernetesManifest@1
            displayName: Deploy to AKS
            inputs:
              action: 'deploy'
              connectionType: 'azureResourceManager'
              azureSubscriptionConnection: 'Azure-DevOps-Practice-sub(a29ac6ee-0d4f-41fe-8359-df26a6fce56c)'
              azureResourceGroup: 'aks-group'
              kubernetesCluster: 'myAKSCluster'
              namespace: '$(namespace)'
              manifests: |
                apex-front-main/frontend-deployment.yaml
                apex-front-main/service.yaml
              containers: '$(containerRegistry)/$(imageRepository):$(tag)'