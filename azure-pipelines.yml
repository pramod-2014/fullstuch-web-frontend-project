trigger:
  branches:
    include:
      - none  # Manual trigger only

pool:
  vmImage: 'ubuntu-latest'

variables:
  dockerRegistryServiceConnection: 'DockerHubConnection'
  imageRepository: 'prmd77/frontend'
  containerRegistry: 'prmd77'
  tag: '$(Build.BuildId)'
  kubernetesServiceConnection: 'aks-service-connection'
  namespace: 'default'
  dockerUsername: '$(dockerUsername)'    # Docker Hub username in Pipeline variable
  dockerPassword: '$(dockerPassword)'    # Docker Hub password or PAT in Pipeline variable

stages:
  - stage: Build
    displayName: Build, Scan & Push
    jobs:
      - job: BuildandScan
        displayName: Build and Scan
        steps:
          - checkout: self

          # ✅ SonarCloud Prepare
          - task: SonarCloudPrepare@1
            inputs:
              SonarCloud: 'sonarqubeServiceConnection'   
              organization: 'cloudsolution'             
              scannerMode: 'CLI'
              configMode: 'manual'
              cliProjectKey: 'cloudsolution_cloudsolution'
              cliProjectName: 'cloudsolution'
              extraProperties: |
                sonar.sources=.
                sonar.exclusions=**/tests/**

          # ✅ Run SonarCloud Analysis
          - task: SonarCloudAnalyze@1

          # ✅ TFLint install and run
          - script: |
              curl -s https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh | bash
              tflint
            displayName: "Run TFLint"
            
          # ✅ Checkov install and run
          - script: |
              pip install checkov
              checkov -d .
            displayName: "Run Checkov"
            
          # ✅ tfsec run
          - task: tfsec@1
            inputs:
              version: 'v1.26.0'
              debug: true
              dir: 'apex-front-main'

          # ✅ Docker build + push temporary image for Trivy scan
          - task: Docker@2
            displayName: Build & Push Temp Image for Scan
            inputs:
              command: buildAndPush
              repository: $(imageRepository)
              dockerfile: '**/Dockerfile'
              containerRegistry: $(dockerRegistryServiceConnection)
              tags: |
                temp-scan

          # ✅ Trivy remote scan using Docker Hub credentials
          - script: |
              echo "Scanning remote image with Trivy..."
              trivy image \
                --exit-code 1 \
                --severity HIGH,CRITICAL \
                --username $(dockerUsername) \
                --password $(dockerPassword) \
                $(imageRepository):temp-scan
            displayName: "Trivy Remote Scan"

          # ✅ Push final image only if scan passes
          - task: Docker@2
            displayName: Push Final Image
            inputs:
              command: push
              repository: $(imageRepository)
              containerRegistry: $(dockerRegistryServiceConnection)
              tags: |
                $(tag)

  - stage: Deploy
    displayName: Deploy to AKS
    dependsOn: [Build]         
    jobs:
      - job: Deploy
        steps:
          - task: KubernetesManifest@1
            displayName: Deploy to AKS
            inputs:
              action: deploy
              kubernetesServiceConnection: $(kubernetesServiceConnection)
              namespace: $(namespace)
              manifests: |                
                apex-front-main/frontend-deployment.yaml
                apex-front-main/service.yaml
              containers: |
                $(containerRegistry)/$(imageRepository):$(tag)
            continueOnError: true
